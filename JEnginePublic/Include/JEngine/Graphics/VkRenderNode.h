#pragma once
#include "JEngine/Graphics/VkPipeline.h"
#include "Jlb/Array.h"

namespace je::vk
{
	// Render function used by the render graph.
	typedef void(*RenderFunc)(VkCommandBuffer cmdBuffer, VkPipelineLayout layout, void* userPtr, size_t frameIndex);

	// Defines the behaviour of a node in a render graph.
	struct RenderNode final
	{
		// Input/Output generated by the render graph.
		struct Resource final
		{
			glm::ivec2 resolution;
			[[nodiscard]] bool operator==(const Resource& other) const;
		};

		// Can be linked to the input of other nodes with the name.
		struct Output final
		{
			const char* name;
			Resource resource;
		};

		// The names of all the render graph resources that will be used as inputs.
		Array<const char*> inputs{};
		// The names of all the render graph resources that will be used as outputs.
		Array<Output> outputs{};
		// The descriptor set layouts used for rendering.
		Array<VkDescriptorSetLayout> layouts{};
		// Shader modules used for rendering.
		Array<PipelineCreateInfo::Module> modules{};

		// Function called during rendering.
		RenderFunc renderFunc = nullptr;
		// Pointer that will be forwarded to the render function.
		void* userPtr = nullptr;

		// This will be filled with the image views for the inputs. View will have to be defined by the end user.
		Array<VkImageView> outImageViews{};
	};
}
